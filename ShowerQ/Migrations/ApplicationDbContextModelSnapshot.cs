// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShowerQ.Models;

namespace ShowerQ.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShowerQ.Models.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ShowerQ.Models.Entities.Dormitory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CurrentScheduleId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Dormitories");
                });

            modelBuilder.Entity("ShowerQ.Models.Entities.Interval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Beginning")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Finishing")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Interval");
                });

            modelBuilder.Entity("ShowerQ.Models.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TenantsPerInterval")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ShowerQ.Models.Entities.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("ShowerQ.Models.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("ShowerQ.Models.Entities.Users.DormitoryAdministrator", b =>
                {
                    b.HasBaseType("ShowerQ.Models.Entities.Users.User");

                    b.Property<int>("DormitoryId")
                        .HasColumnType("int");

                    b.HasIndex("DormitoryId");

                    b.HasDiscriminator().HasValue("DormitoryAdministrator");
                });

            modelBuilder.Entity("ShowerQ.Models.Entities.Users.SystemAdministrator", b =>
                {
                    b.HasBaseType("ShowerQ.Models.Entities.Users.User");

                    b.HasDiscriminator().HasValue("SystemAdministrator");
                });

            modelBuilder.Entity("ShowerQ.Models.Entities.Users.Tenant", b =>
                {
                    b.HasBaseType("ShowerQ.Models.Entities.Users.User");

                    b.Property<int?>("DormitoryId")
                        .HasColumnName("Tenant_DormitoryId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DormitoryId");

                    b.HasDiscriminator().HasValue("Tenant");
                });

            modelBuilder.Entity("ShowerQ.Models.Entities.Dormitory", b =>
                {
                    b.HasOne("ShowerQ.Models.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShowerQ.Models.Entities.Schedule", "CurrentSchedule")
                        .WithMany()
                        .HasForeignKey("CurrentScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShowerQ.Models.Entities.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShowerQ.Models.Entities.Interval", b =>
                {
                    b.HasOne("ShowerQ.Models.Entities.Schedule", null)
                        .WithMany("Intervals")
                        .HasForeignKey("ScheduleId");
                });

            modelBuilder.Entity("ShowerQ.Models.Entities.Users.DormitoryAdministrator", b =>
                {
                    b.HasOne("ShowerQ.Models.Entities.Dormitory", "Dormitory")
                        .WithMany()
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShowerQ.Models.Entities.Users.Tenant", b =>
                {
                    b.HasOne("ShowerQ.Models.Entities.Dormitory", null)
                        .WithMany("Tenants")
                        .HasForeignKey("DormitoryId");
                });
#pragma warning restore 612, 618
        }
    }
}
